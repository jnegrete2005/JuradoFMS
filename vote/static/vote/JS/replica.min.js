function cleanReplicaValues(){const e="\n    mutation SaveModes($id: ID!, $mode: String!, $value1: [Float]!, $value2: [Float]!) {\n      saveModes(pollId: $id, mode: $mode, value1: $value1, value2: $value2) {\n        comp1 {\n          mode\n        }\n        comp2 {\n          mode\n        }\n      }\n    }\n  ";fetch("/graphql/",{method:"POST",headers:{"Content-Type":"application/json",Accept:"application/json","X-CSRFToken":getCookie("csrftoken")},body:JSON.stringify({query:e,variables:{id:parseInt(localStorage.getItem("poll")),mode:"replica",value1:[9,9,9,9,9,9,9,9,9],value2:[9,9,9,9,9,9,9,9,9]}})});const t=Competitor.unserialize(localStorage.getItem("comp_1")),o=Competitor.unserialize(localStorage.getItem("comp_2"));t.replica=[9,9,9,9,9,9,9,9,9],o.replica=[9,9,9,9,9,9,9,9,9],localStorage.setItem("comp_1",t.serialize()),localStorage.setItem("comp_2",o.serialize())}function validWinner(e){const t=[Competitor.unserialize(localStorage.getItem("comp_1")).name,Competitor.unserialize(localStorage.getItem("comp_2")).name];return t.includes(e)}function plus_counter(){const e=Competitor.unserialize(localStorage.getItem("comp_1")),t=Competitor.unserialize(localStorage.getItem("comp_2")),o="\n    mutation PlusReplica($id: ID!) {\n      plusReplica(id: $id) {\n        poll {\n          repCounter\n        }\n      }\n    }\n  ";fetch("/graphql/",{method:"POST",headers:{"Content-Type":"application/json",Accept:"application/json","X-CSRFToken":getCookie("csrftoken")},body:JSON.stringify({query:o,variables:{id:parseInt(localStorage.getItem("poll"))}}),credentials:"include"}).then(e=>{if(!e.ok)throw Error(`${e.statusText} - ${e.status}`);return e.json()}).then(o=>{if(o.errors)throw Error(o.errors[0].message);e.counter++,t.counter++,localStorage.setItem("comp_1",e.serialize()),localStorage.setItem("comp_2",t.serialize())}).catch(e=>{createError(e)})}import{changeMode}from"./change_mode.js";import{Competitor}from"./classes.js";import{createError,getCookie,getWinner,reload,useModal}from"./util.js";export function fillRepTable(){for(let e=1;e<=2;e++){const t=Competitor.unserialize(localStorage.getItem(`comp_${e}`));Array.from(document.getElementsByClassName(`comp-${e}-rep`)).forEach((e,o)=>{e.innerHTML=0===o?t.name:t.get_sum("replica").toString()})}const e=getWinner(Competitor.unserialize(localStorage.getItem("comp_1")),Competitor.unserialize(localStorage.getItem("comp_2")),!0);"decide"===e?(document.getElementById("rep-btn").dataset.decide="true",Array.from(document.getElementsByClassName("choice-input")).forEach((e,t)=>{e.innerHTML=Competitor.unserialize(localStorage.getItem(`comp_${t+1}`)).name,e.addEventListener("click",()=>{localStorage.setItem("winner",e.innerHTML)})}),document.getElementById("choices-form").classList.replace("d-none","d-flex")):document.getElementById("rep-btn").dataset.decide="false",document.getElementById("rep-winner").innerHTML="decide"===e?"Réplica":e,document.getElementById("rep-btn").innerHTML="Réplica"===e?"Réplica":"Terminar",document.getElementById("end-container").classList.add("d-none"),document.getElementById("poll-container").classList.add("d-none"),document.getElementById("rep-res-container").classList.remove("d-none")}document.getElementById("prev-rep-btn").addEventListener("click",()=>{history.pushState({old_mode:"end_replica",new_mode:"replica"},"","#replica"),changeMode("end_replica","replica"),localStorage.removeItem("winner")});const rep_btn=document.getElementById("rep-btn");rep_btn.addEventListener("click",()=>{if("Terminar"!==rep_btn.innerHTML||"false"!==rep_btn.dataset.decide)if("false"!==rep_btn.dataset.decide||localStorage.getItem("winner")){if("true"===rep_btn.dataset.decide&&localStorage.getItem("winner")){const e=localStorage.getItem("winner");if(!validWinner(e))return useModal("Has tocado algo que no debiste.","El competidor que has escogido no existe.");const t="\n      mutation SaveWinner($id: ID!, $winner: String!) {\n        saveWinner(pollId: $id, winner: $winner) {\n          poll {\n            winner\n          }\n        }\n      }\n    ";return void fetch("/graphql/",{method:"POST",headers:{"Content-Type":"application/json",Accept:"application/json","X-CSRFToken":getCookie("csrftoken")},body:JSON.stringify({query:t,variables:{id:parseInt(localStorage.getItem("poll")),winner:e}}),credentials:"include"}).then(e=>e.json()).then(e=>{if(e.errors)throw Error("No se pudo guardar el ganador");reload()}).catch(e=>{createError(e)})}useModal("No has escogido un ganador!","Como no ha habido un ganador, tienes que escoger uno tú mism@, de lo contrario, no habrá uno!\nPara escoger uno, solo hazle click a la cajita con el competidor que opinas que mejor desempeñó durante toda la batalla")}else history.pushState({old_mode:"end_replica",new_mode:"replica"},"","#replica"),cleanReplicaValues(),changeMode("end_replica","replica"),plus_counter();else reload()});